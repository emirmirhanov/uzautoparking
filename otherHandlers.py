from aiogram.types import ContentType
import cars_db
from main import dp
import button
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command


USER_ID = None


class FSMSearch(StatesGroup):
    search_st = State()


class FSMAuthorization(StatesGroup):
    password = State()


@dp.message_handler(Command('start'))
async def echo(message: types.Message):
    fullname = cars_db.search_tg_user_id(message.from_user.id)
    if fullname and not fullname[2]:
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {fullname[0].title()} {fullname[1].title()}', reply_markup=button.search)
    elif fullname and fullname[2] == 1:
        await message.answer(f"""–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã 
–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {fullname[3]}""", reply_markup=button.ReplyKeyboardRemove())
    else:
        await message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', reply_markup=button.authorize)


@dp.message_handler(text='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
async def search_fn(message: types.Message):
    await message.answer('–í–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup=button.ReplyKeyboardRemove())
    await FSMAuthorization.password.set()


@dp.message_handler(state=FSMAuthorization.password)
async def password_search(message: types.Message, state: FSMContext):
    global USER_ID
    USER_ID = cars_db.search_password(message.text)
    if USER_ID:
        await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', reply_markup=button.tel_num)

    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ü–∞—Ä–æ–ª—å', reply_markup=button.authorize)
    await state.finish()


@dp.message_handler(content_types=ContentType.CONTACT)
async def password_search(message: types.Message):
    phone_number = message.contact.phone_number
    if message.contact:
        cars_db.add_user_id(message.from_user.id, phone_number, USER_ID)
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', reply_markup=button.search)


@dp.message_handler(text='–ü–æ–∏—Å–∫ üîç')
async def search_fn(message: types.Message):
    await message.answer('–í–µ–¥–∏—Ç–µ –ò–º—è –∏–ª–∏ –ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è', reply_markup=button.ReplyKeyboardRemove())
    await FSMSearch.search_st.set()


@dp.message_handler(state=FSMSearch.search_st)
async def search_fn_state(message: types.Message, state: FSMContext):
    result = cars_db.search_employee(message.text)
    print(result)
    if result:
        for i in result:
            await message.answer(f"""–ò–º—è: {i[0]}
–§–∞–º–∏–ª–∏—è: {i[1]}
–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {i[2]}
–ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è: {i[3]}
–¶–≤–µ—Ç: {i[4]}
""", reply_markup=button.search)
    else:
        await message.answer(f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É "{message.text}" \n–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=button.search)
    await state.finish()


@dp.message_handler(text='üîº')
@dp.message_handler(text='üîΩ')
@dp.message_handler(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ ‚úÖ')
async def change_places_fn(message: types.Message):
    free = '–°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞: '
    busy = '–ó–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞: '
    total = '–û–±—â–µ–µ –∫–æ–ª. –º–µ—Å—Ç: '
    if message.text == 'üîº':
        if cars_db.plus() == 0:
            await message.answer(f'ü§¨', reply_markup=button.search)
            await message.answer(f'–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç!!!', reply_markup=button.search)
    elif message.text == 'üîΩ':
        if cars_db.minus() == 0:
            await message.answer(f'üòé', reply_markup=button.search)
            await message.answer(f'–ù–µ—Ç –∞–≤—Ç–æ –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ', reply_markup=button.search)
    spaces = cars_db.all_spaces()
    free += str(spaces[2])
    busy += str(spaces[1])
    total += str(spaces[0])
    await message.answer(f'{free}\n{busy}\n{total}', reply_markup=button.search)
